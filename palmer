#!/usr/bin/env node

'use strict';

const program = require('commander');
const commands = require('./core/cli/commands');

program
    .version('0.0.1.0', '-v, --version')
    .command('init <dir>')
    .action(commands.init);

program
    .command('check')
    .action(commands.check);

program
    .command('install')
    .description('Install palmer in /usr/bin')
    .action(commands.install);

program
    .command('up')
    .option('-s, --service-name [service-name]', 'Build only the given servie_name')
    .option('-r, --rebuild', 'Force kill and remove before building')
    .description('Build the environment / particular service')
    .action(commands.up);

program
    .command('down')
    .description('Tear the environment down in flames')
    .action(commands.down);

program
    .command('test')
    .option('-s, --service-name [service-name]', 'Test the given servie-name')
    .option('-n, --no-rebuild', 'Do not rebuild, only test')
    .action(commands.test);

program
    .command('ps')
    .description('Show running Docker processes')
    .option('-a, --all', 'Show all running Docker processes')
    .action(commands.ps);

program
    .command('cp-utils')
    .description('Copy shared utils to services')
    .option('-s, --service-name [service-name]', 'Copy utils in this service only')
    .action(commands.cp_utils);

program
    .command('cleanup')
    .description('Clean-up old Docker images')
    .action(commands.cleanup);

program
    .command('kill <service>')
    .action(commands.kill);

program
    .command('start <service>')
    .action(commands.start);

program
    .command('ls-services')
    .description('List all services')
    .action(commands.ls_services);

program
    .command('compile')
    .option('-s, --service-name [service-name]', 'Build only the service given')
    .description('Build the environment / install npm modules')
    .action(commands.compile);

program
    .command('shell-complete')
    .description('Shell complete script')
    .action(commands.shell_complete);

program
    .command('help')
    .description('Show usage information')
    .action(() => console.log(program.helpInformation()));

program.parse(process.argv);

if (process.argv.length == 2){
    console.log(program.helpInformation());
}
